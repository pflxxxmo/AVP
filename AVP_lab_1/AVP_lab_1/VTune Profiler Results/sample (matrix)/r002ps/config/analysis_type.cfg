<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:str="http://exslt.org/strings" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal>
  <name>%PerfSnapAtypeName</name>
  <shortName>%PerfSnapAtypeShortName</shortName>
  <description>%PerfSnapAtypeDescription</description>
  <shortDescription>%PerfSnapAtypeShortDescription</shortDescription>
  <abbreviation>ps</abbreviation>
  <alias>performance-snapshot</alias>
  <iconClass>compass solid</iconClass>
  <property name="helpId">intel.phe.configs.performance_snapshot</property>
  <boolean:property name="supressAdvancedSection">true</boolean:property>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:if test="exsl:ctx('PMU') = 'snb' or exsl:ctx('PMU') = 'snbep' or (exsl:ctx('targetOS')!='Windows' and exsl:ctx('targetOS')!='Linux') or exsl:ctx('connectionType', '') = 'tcp'">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicable')"/>
  </xsl:if>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%PerfSnapshotViewpointName</defaultValue>
  </stringKnob>
  <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
  <xsl:variable name="isPerfBandwidthAvailable" select="$pmuCommon//variables/isPerfBWAvailable"/>
  <xsl:variable name="defaultBandiwtdth">
   <xsl:value-of select="exsl:ctx('isSEPDriverAvailable', 0) or $isPerfBandwidthAvailable='true'"/>
  </xsl:variable>
  <xsl:variable name="knobsParams">
   <params hideKnobInPerfsnapshot="true" defaultMemoryBandwidth="{$defaultBandiwtdth}"/>
  </xsl:variable>
  <xsl:variable name="knobsParamsName">
   <xsl:text>config://analysis_type/include/knobs.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($knobsParams)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="commonKnobs" select="document($knobsParamsName)"/>
  <booleanKnob id="enableCharacterizationInsights" displayName="%EnableCharacterizationInsights" cliName="enable-characterization-insights" boolean:visible="false">
   <description>%EnableCharacterizationInsightsDescriptionAH</description>
   <boolean:defaultValue>true</boolean:defaultValue>
  </booleanKnob>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='isUArchUsageAvailable']"/>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectMemoryBW']"/>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='dramBandwidthLimitsAT']"/>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='useGpuCountingMode']"/>
 </knobs>
 <analysis xsl:version="1.0" str:keep_str_namespace="" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:copy-of select="document('config://analysis_type/include/prerequisites.xsl')/pmu_prerequisites/*"/>
  <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl')"/>
  <xsl:variable name="mainEvents" select="$events//events/cpi"/>
  <xsl:variable name="fpuEvents" select="$events//events/fpu"/>
  <xsl:variable name="retiredEvents" select="$events//events/retired"/>
  <xsl:variable name="memEvents" select="$events//events/memboundHPC"/>
  <xsl:variable name="pmuCommon" select="document('config://include/pmu_common.xsl')"/>
  <xsl:variable name="isBandwidthAvailable" select="$pmuCommon//variables/isDRAMBWAvailable"/>
  <xsl:variable name="memBandwidthEvents" select="$pmuCommon//variables/memBandwidthEvents"/>
  <collector id="runss">
   <xsl:variable name="isSEPFlow" select="exsl:ctx('isSEPDriverAvailable', 0) and (not(exsl:ctx('usePerf', 0)) or exsl:ctx('targetOS', '') = 'Windows' or exsl:ctx('targetOS', '') = 'MacOSX' or exsl:ctx('targetOS', '') = 'FreeBSD')"/>
   <xsl:variable name="isPerfFlow" select="(exsl:ctx('targetOS', '') = 'Linux' or exsl:ctx('targetOS', '') = 'Android') and exsl:ctx('LinuxPerfCredentials', 'NotAvailable')!='NotAvailable'                   and contains(exsl:ctx('LinuxPerfCapabilities', ''), 'format')"/>
   <xsl:variable name="isPMUAvailable" select="exsl:ctx('PerfmonVersion', '4') &gt; '1' and ($isSEPFlow or $isPerfFlow)"/>
   <xsl:variable name="isPermissionInsufficient" select="exsl:ctx('targetOS')='Windows' and not(exsl:ctx('AdministratorPrivileges', 'false'))"/>
   <xsl:if test="$isPermissionInsufficient">
    <xsl:value-of select="exsl:warning('%DriverPermissionErrorWindows')"/>
   </xsl:if>
   <xsl:choose>
    <xsl:when test="not($isPMUAvailable)">
     <collectorKnob knob="collectSamplesMode">nostack</collectorKnob>
     <collectorKnob knob="samplingInterval">100</collectorKnob>
     <boolean:collectorKnob knob="hideWarningInPerfsnapshot">true</boolean:collectorKnob>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute name="id">runsa</xsl:attribute>
     <boolean:collectorKnob knob="hideWarningInPerfsnapshot">true</boolean:collectorKnob>
     <xsl:if test="exsl:ctx('collectMemoryBW', 0)">
      <boolean:collectorKnob knob="enableDramBandwidthLimitsWarning">true</boolean:collectorKnob>
      <xsl:if test="$isBandwidthAvailable='true'">
       <collectorKnob knob="collectMemBandwidth">
        <xsl:copy-of select="exsl:ctx('collectMemoryBW', 0)"/>
       </collectorKnob>
      </xsl:if>
     </xsl:if>
     <boolean:collectorKnob knob="cpuGpuUsageData">true</boolean:collectorKnob>
     <boolean:collectorKnob knob="useCountingMode">true</boolean:collectorKnob>
     <collectorKnob knob="collectFramesMode">false</collectorKnob>
     <xsl:variable name="allEvents">
      <xsl:value-of select="$mainEvents"/>
      <xsl:if test="$retiredEvents and $retiredEvents != ''">
       <xsl:text>,</xsl:text>
       <xsl:value-of select="$retiredEvents"/>
      </xsl:if>
      <xsl:if test="exsl:ctx('enableCharacterizationInsights', 0)">
       <xsl:if test="$fpuEvents and $fpuEvents != ''">
        <xsl:text>,</xsl:text>
        <xsl:value-of select="$fpuEvents"/>
       </xsl:if>
       <xsl:if test="$memEvents and $memEvents != ''">
        <xsl:text>,</xsl:text>
        <xsl:value-of select="$memEvents"/>
       </xsl:if>
      </xsl:if>
      <xsl:if test="$isBandwidthAvailable = 'true' and $memBandwidthEvents != ''">
       <xsl:text>,</xsl:text>
       <xsl:value-of select="$memBandwidthEvents"/>
      </xsl:if>
     </xsl:variable>
     <collectorKnob knob="pmuEventConfig">
      <xsl:value-of select="exsl:merge_pmu_events($allEvents)"/>
     </collectorKnob>
     <boolean:collectorKnob knob="isUArchUsageAvailable">true</boolean:collectorKnob>
     <xsl:if test="exsl:ctx('genArchOnBoard', 0) &gt; 5">
      <boolean:collectorKnob knob="errorsAsWarnings">true</boolean:collectorKnob>
      <collectorKnob knob="gpuSamplingInterval">1</collectorKnob>
      <collectorKnob knob="gpuCounters">global-local-accesses</collectorKnob>
      <xsl:if test="exsl:ctx('useGpuCountingMode', 0)">
       <boolean:collectorKnob knob="useGpuCounting">true</boolean:collectorKnob>
      </xsl:if>
     </xsl:if>
     <boolean:collectorKnob knob="explicitUncoreEventsConfig">true</boolean:collectorKnob>
     <xsl:if test="exsl:ctx('PMU') != 'knl' and exsl:ctx('collectMemoryBW', 0) and exsl:ctx('dramBandwidthLimitsAT', 0)">
      <collectorKnob knob="dramBandwidthLimits">true</collectorKnob>
     </xsl:if>
    </xsl:otherwise>
   </xsl:choose>
  </collector>
 </analysis>
</bag>
