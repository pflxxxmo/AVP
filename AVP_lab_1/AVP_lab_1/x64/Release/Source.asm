; Listing generated by Microsoft (R) Optimizing Compiler Version 19.28.29335.0 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	??_C@_02EEKDFEKL@ms@				; `string'
PUBLIC	??_C@_0CJ@KCMOAIEJ@Time?5of?5auto?5vectorized?5multipl@ ; `string'
PUBLIC	??_C@_0CI@MADAGADH@Time?5of?5non?5vectorized?5multipli@ ; `string'
PUBLIC	??_C@_0CN@CGANNBID@Time?5of?5manually?5vectorized?5mul@ ; `string'
PUBLIC	??_C@_09FGBMFCFC@ALL?5RIGHT@			; `string'
PUBLIC	??_C@_0M@PNDGOBCJ@WAS?5MISTAKE@			; `string'
PUBLIC	??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@		; `string'
PUBLIC	??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ ; `string'
EXTRN	__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ:PROC
EXTRN	__imp_?_Getdays@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_Getmonths@_Locinfo@std@@QEBAPEBDXZ:PROC
EXTRN	__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ:PROC
EXTRN	__imp_?rdstate@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?good@ios_base@std@@QEBA_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QEBAHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEBA_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QEAA_J_J@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@K@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z:PROC
EXTRN	__imp_GetTickCount:PROC
EXTRN	__imp___std_terminate:PROC
EXTRN	??_U@YAPEAX_K@Z:PROC				; operator new[]
EXTRN	__imp_rand:PROC
EXTRN	__imp_?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?uncaught_exception@std@@YA_NXZ:PROC
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_srand:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_clock:PROC
EXTRN	__imp_SetConsoleTextAttribute:PROC
EXTRN	__imp_calloc:PROC
EXTRN	__imp__Mbrtowc:PROC
EXTRN	??_V@YAXPEAX@Z:PROC				; operator delete[]
EXTRN	__security_check_cookie:PROC
EXTRN	__imp___CxxFrameHandler4:PROC
;	COMDAT ??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@
CONST	SEGMENT
??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@ DB ':'
	DB	00H, 'A', 00H, 'M', 00H, ':', 00H, 'a', 00H, 'm', 00H, ':', 00H
	DB	'P', 00H, 'M', 00H, ':', 00H, 'p', 00H, 'm', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@
CONST	SEGMENT
??_C@_0N@LPFKKEBD@?3AM?3am?3PM?3pm@ DB ':AM:am:PM:pm', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PNDGOBCJ@WAS?5MISTAKE@
CONST	SEGMENT
??_C@_0M@PNDGOBCJ@WAS?5MISTAKE@ DB 'WAS MISTAKE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FGBMFCFC@ALL?5RIGHT@
CONST	SEGMENT
??_C@_09FGBMFCFC@ALL?5RIGHT@ DB 'ALL RIGHT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CGANNBID@Time?5of?5manually?5vectorized?5mul@
CONST	SEGMENT
??_C@_0CN@CGANNBID@Time?5of?5manually?5vectorized?5mul@ DB 'Time of manua'
	DB	'lly vectorized multiplication: ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@MADAGADH@Time?5of?5non?5vectorized?5multipli@
CONST	SEGMENT
??_C@_0CI@MADAGADH@Time?5of?5non?5vectorized?5multipli@ DB 'Time of non v'
	DB	'ectorized multiplication: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@KCMOAIEJ@Time?5of?5auto?5vectorized?5multipl@
CONST	SEGMENT
??_C@_0CJ@KCMOAIEJ@Time?5of?5auto?5vectorized?5multipl@ DB 'Time of auto '
	DB	'vectorized multiplication: ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEKDFEKL@ms@
CONST	SEGMENT
??_C@_02EEKDFEKL@ms@ DB 'ms', 00H			; `string'
CONST	ENDS
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ; std::operator<<<char,std::char_traits<char>,__int64>
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	main
PUBLIC	?check@@YA_NPEAPEAM0@Z				; check
PUBLIC	?changeColors@@YAXH@Z				; changeColors
PUBLIC	?AVX_mul@@YAXHHHPEAPEAM00@Z			; AVX_mul
PUBLIC	?no_vec_mul@@YAXHHHPEAPEAM00@Z			; no_vec_mul
PUBLIC	?auto_vec_mul@@YAXHHHPEAPEAM00@Z		; auto_vec_mul
PUBLIC	?fill@@YAX_K0PEAPEAMH@Z				; fill
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__std_terminate:PROC
EXTRN	memset:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD imagerel $LN4
	DD	imagerel $LN4+57
	DD	imagerel $unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD imagerel $LN99
	DD	imagerel $LN99+458
	DD	imagerel $unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DD	imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA+59
	DD	imagerel $unwind$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z DD imagerel $LN4
	DD	imagerel $LN4+38
	DD	imagerel $unwind$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN8
	DD	imagerel $LN8+44
	DD	imagerel $unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN8
	DD	imagerel $LN8+36
	DD	imagerel $unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD imagerel $LN24
	DD	imagerel $LN24+122
	DD	imagerel $unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD imagerel $LN13
	DD	imagerel $LN13+62
	DD	imagerel $unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN171
	DD	imagerel $LN171+1536
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?changeColors@@YAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+37
	DD	imagerel $unwind$?changeColors@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AVX_mul@@YAXHHHPEAPEAM00@Z DD imagerel $LN27
	DD	imagerel $LN27+277
	DD	imagerel $unwind$?AVX_mul@@YAXHHHPEAPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?no_vec_mul@@YAXHHHPEAPEAM00@Z DD imagerel $LN28
	DD	imagerel $LN28+478
	DD	imagerel $unwind$?no_vec_mul@@YAXHHHPEAPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?auto_vec_mul@@YAXHHHPEAPEAM00@Z DD imagerel $LN40
	DD	imagerel $LN40+504
	DD	imagerel $unwind$?auto_vec_mul@@YAXHHHPEAPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fill@@YAX_K0PEAPEAMH@Z DD imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?fill@@YAX_K0PEAPEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?fill@@YAX_K0PEAPEAMH@Z DD imagerel $LN18+53
	DD	imagerel $LN18+169
	DD	imagerel $chain$0$?fill@@YAX_K0PEAPEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?fill@@YAX_K0PEAPEAMH@Z DD imagerel $LN18+169
	DD	imagerel $LN18+189
	DD	imagerel $chain$1$?fill@@YAX_K0PEAPEAMH@Z
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?fill@@YAX_K0PEAPEAMH@Z DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?fill@@YAX_K0PEAPEAMH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?fill@@YAX_K0PEAPEAMH@Z DD 020521H
	DD	087405H
	DD	imagerel $LN18
	DD	imagerel $LN18+53
	DD	imagerel $unwind$?fill@@YAX_K0PEAPEAMH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fill@@YAX_K0PEAPEAMH@Z DD 081301H
	DD	0a5413H
	DD	093413H
	DD	0f00f3213H
	DD	0600be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?auto_vec_mul@@YAXHHHPEAPEAM00@Z DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?no_vec_mul@@YAXHHHPEAPEAM00@Z DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AVX_mul@@YAXHHHPEAPEAM00@Z DD 081501H
	DD	0a7415H
	DD	096415H
	DD	083415H
	DD	0e0115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?changeColors@@YAXH@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	081001H
	DD	0f00c7210H
	DD	0d008e00aH
	DD	07004c006H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 04H
	DB	','
	DB	00H
	DB	'<'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 068H
	DD	imagerel $stateUnwindMap$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DD	imagerel $ip2state$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 020619H
	DD	030023206H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 04H
	DB	'X'
	DB	00H
	DB	'H'
	DB	02H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 02H
	DB	0cH
	DD	imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	060H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
	DD	imagerel $ip2state$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 040f11H
	DD	07340fH
	DD	0700b320fH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 02H
	DB	'6'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ DD 010419H
	DD	04204H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA DD 020a01H
	DD	05006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0eH
	DB	0e2H
	DB	00H
	DB	'T'
	DB	02H
	DB	0b6H
	DB	06H
	DB	0d8H
	DB	04H
	DB	'L'
	DB	0aH
	DB	'('
	DB	0cH
	DB	'2'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	011H
	DB	080H
	DD	imagerel ?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA
	DB	091H, 05H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 02H
	DB	04H
	DB	04H
	DB	06H
	DD	imagerel $handlerMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 0cH
	DB	0aH
	DD	imagerel ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	040H
	DB	03aH
	DD	imagerel ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
	DB	040H
	DB	030H
	DB	038H
	DB	07eH
	DD	imagerel __imp___std_terminate
	DB	02eH
	DD	imagerel __imp___std_terminate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DB 038H
	DD	imagerel $stateUnwindMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $tryMap$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
	DD	imagerel $ip2state$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z DD 081619H
	DD	0d3416H
	DD	0f0125216H
	DD	0c00ee010H
	DD	0600b700cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z DD 020601H
	DD	030023206H
xdata	ENDS
; Function compile flags: /Ogtpy
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
;	COMDAT ?fill@@YAX_K0PEAPEAMH@Z
_TEXT	SEGMENT
height$ = 64
width$ = 72
matrix$ = 80
key$ = 88
?fill@@YAX_K0PEAPEAMH@Z PROC				; fill, COMDAT

; 15   : void fill(size_t height, size_t width, float** matrix, int key) {

$LN18:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	ebx, r9d
	mov	rsi, r8
	mov	r14, rdx
	mov	r15, rcx

; 16   : 	srand(clock() + key);

	call	QWORD PTR __imp_clock
	lea	ecx, DWORD PTR [rbx+rax]
	call	QWORD PTR __imp_srand
	xor	ebp, ebp

; 17   : 	for (int i = 0; i < height; i++)

	test	r15, r15
	je	SHORT $LN3@fill
	mov	QWORD PTR [rsp+64], rdi
	npad	6
$LL4@fill:

; 18   : 		for (int j = 0; j < width; j++)

	xor	ebx, ebx
	test	r14, r14
	je	SHORT $LN2@fill
	xor	edi, edi
	npad	7
$LL7@fill:

; 19   : 			matrix[i][j] = 1 + rand() % 15;

	call	QWORD PTR __imp_rand
	inc	ebx
	lea	rdi, QWORD PTR [rdi+4]
	mov	r8d, eax
	mov	eax, -2004318071			; ffffffff88888889H
	imul	r8d
	mov	rax, QWORD PTR [rsi]
	add	edx, r8d
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31
	add	edx, ecx
	imul	ecx, edx, 15
	sub	r8d, ecx
	inc	r8d
	movd	xmm0, r8d
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rdi+rax-4], xmm0
	movsxd	rax, ebx
	cmp	rax, r14
	jb	SHORT $LL7@fill
$LN2@fill:

; 17   : 	for (int i = 0; i < height; i++)

	inc	ebp
	add	rsi, 8
	movsxd	rax, ebp
	cmp	rax, r15
	jb	SHORT $LL4@fill
	mov	rdi, QWORD PTR [rsp+64]
$LN3@fill:

; 20   : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
?fill@@YAX_K0PEAPEAMH@Z ENDP				; fill
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
;	COMDAT ?auto_vec_mul@@YAXHHHPEAPEAM00@Z
_TEXT	SEGMENT
$T1 = 32
height_A$dead$ = 64
width_B$dead$ = 72
width_A$dead$ = 80
A$ = 88
B$ = 96
C$ = 104
?auto_vec_mul@@YAXHHHPEAPEAM00@Z PROC			; auto_vec_mul, COMDAT

; 23   : {

$LN40:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rbx, r9

; 24   : 	DWORD start_time = GetTickCount();

	call	QWORD PTR __imp_GetTickCount
	mov	r14, QWORD PTR C$[rsp]
	mov	esi, 2800				; 00000af0H
	mov	rdi, QWORD PTR B$[rsp]
	mov	ebp, eax
	sub	r14, rbx
	npad	9
$LL4@auto_vec_m:

; 26   : 	{
; 27   : 		float* c = C[i];

	mov	r8, QWORD PTR [r14+rbx]
	xor	r9d, r9d
	mov	r10, QWORD PTR [rbx]
	lea	r11, QWORD PTR [r8+11196]
	npad	15
$LL7@auto_vec_m:

; 29   : 		{
; 30   : 			const float* b = B[k];

	mov	rcx, QWORD PTR [rdi+r9*8]

; 31   : 			float a = A[i][k];

	movss	xmm2, DWORD PTR [r10]
	movaps	xmm3, xmm2
	shufps	xmm3, xmm3, 0
	lea	rax, QWORD PTR [rcx+11196]
	cmp	r8, rax
	ja	SHORT $LN22@auto_vec_m

; 29   : 		{
; 30   : 			const float* b = B[k];

	cmp	r11, rcx
	jb	SHORT $LN22@auto_vec_m

; 32   : 			for (int j = 0; j < width_B; j++)

	lea	rax, QWORD PTR [r8+4]
	sub	rcx, r8
	mov	edx, 700				; 000002bcH
	npad	3
$LL32@auto_vec_m:

; 33   : 				c[j] += a * b[j];

	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax-4]
	addss	xmm0, DWORD PTR [rax-4]
	movss	DWORD PTR [rax-4], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax]
	addss	xmm1, DWORD PTR [rax]
	movss	DWORD PTR [rax], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+4]
	addss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rax+4], xmm0
	mulss	xmm1, DWORD PTR [rcx+rax+8]
	addss	xmm1, DWORD PTR [rax+8]
	movss	DWORD PTR [rax+8], xmm1
	add	rax, 16
	sub	rdx, 1
	jne	SHORT $LL32@auto_vec_m
	jmp	SHORT $LN5@auto_vec_m
$LN22@auto_vec_m:

; 29   : 		{
; 30   : 			const float* b = B[k];

	lea	rax, QWORD PTR [r8+16]
	sub	rcx, r8
	mov	edx, 175				; 000000afH
	npad	15
$LL10@auto_vec_m:

; 33   : 				c[j] += a * b[j];

	movups	xmm0, XMMWORD PTR [rax-16]
	movups	xmm1, XMMWORD PTR [rcx+rax-16]
	movups	xmm2, XMMWORD PTR [rcx+rax]
	mulps	xmm1, xmm3
	mulps	xmm2, xmm3
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rax-16], xmm1
	movups	xmm0, XMMWORD PTR [rax]
	movups	xmm1, XMMWORD PTR [rcx+rax+16]
	addps	xmm2, xmm0
	mulps	xmm1, xmm3
	movups	XMMWORD PTR [rax], xmm2
	movups	xmm0, XMMWORD PTR [rax+16]
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rax+16], xmm1
	movups	xmm0, XMMWORD PTR [rax+32]
	movups	xmm1, XMMWORD PTR [rcx+rax+32]
	mulps	xmm1, xmm3
	addps	xmm1, xmm0
	movups	XMMWORD PTR [rax+32], xmm1
	add	rax, 64					; 00000040H
	sub	rdx, 1
	jne	SHORT $LL10@auto_vec_m
$LN5@auto_vec_m:

; 28   : 		for (int k = 0; k < width_A; k++)

	inc	r9
	add	r10, 4
	cmp	r9, 5600				; 000015e0H
	jl	$LL7@auto_vec_m

; 25   : 	for (int i = 0; i < height_A; i++)

	add	rbx, 8
	sub	rsi, 1
	jne	$LL4@auto_vec_m

; 36   : 	cout << setw(5) << "Time of auto vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	lea	edx, QWORD PTR [rsi+5]
	lea	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR __imp_?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z
	mov	rdi, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip

; 424  :     (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

	mov	rdx, QWORD PTR [rdi]
	movsxd	rcx, DWORD PTR [rdx+4]
	mov	rdx, QWORD PTR [rax+8]
	add	rcx, rdi
	call	QWORD PTR [rax]
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp

; 36   : 	cout << setw(5) << "Time of auto vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	call	QWORD PTR __imp_GetTickCount
	lea	rdx, OFFSET FLAT:??_C@_0CJ@KCMOAIEJ@Time?5of?5auto?5vectorized?5multipl@
	mov	rcx, rdi
	mov	ebx, eax
	sub	ebx, ebp
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	mov	edx, ebx
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@K@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_02EEKDFEKL@ms@
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 37   : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?auto_vec_mul@@YAXHHHPEAPEAM00@Z ENDP			; auto_vec_mul
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
;	COMDAT ?no_vec_mul@@YAXHHHPEAPEAM00@Z
_TEXT	SEGMENT
$T1 = 32
height_A$dead$ = 64
width_B$dead$ = 72
width_A$dead$ = 80
A$ = 88
B$ = 96
C$ = 104
?no_vec_mul@@YAXHHHPEAPEAM00@Z PROC			; no_vec_mul, COMDAT

; 41   : {

$LN28:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rbx, r9

; 42   : 	DWORD start_time = GetTickCount();

	call	QWORD PTR __imp_GetTickCount
	mov	r14, QWORD PTR C$[rsp]
	mov	esi, 2800				; 00000af0H
	mov	rdi, QWORD PTR B$[rsp]
	mov	ebp, eax
	sub	r14, rbx
	npad	9
$LL4@no_vec_mul:

; 44   : 	{
; 45   : 		float* c = C[i];

	mov	r10, QWORD PTR [r14+rbx]
	xor	edx, edx
	mov	r8, QWORD PTR [rbx]
	npad	7
$LL7@no_vec_mul:

; 47   : 		{
; 48   : 			const float* b = B[k];

	mov	rcx, QWORD PTR [rdi+rdx*8]
	lea	rax, QWORD PTR [r10+4]

; 49   : 			float a = A[i][k];

	movss	xmm2, DWORD PTR [r8]
	sub	rcx, r10
	mov	r9d, 280				; 00000118H
	npad	10
$LL10@no_vec_mul:

; 50   : #pragma loop(no_vector)
; 51   : 			for (int j = 0; j < width_B; j++)
; 52   : 				c[j] += a * b[j];

	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax-4]
	addss	xmm0, DWORD PTR [rax-4]
	movss	DWORD PTR [rax-4], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax]
	addss	xmm1, DWORD PTR [rax]
	movss	DWORD PTR [rax], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+4]
	addss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rax+4], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax+8]
	addss	xmm1, DWORD PTR [rax+8]
	movss	DWORD PTR [rax+8], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+12]
	addss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR [rax+12], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax+16]
	addss	xmm1, DWORD PTR [rax+16]
	movss	DWORD PTR [rax+16], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+20]
	addss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR [rax+20], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax+24]
	addss	xmm1, DWORD PTR [rax+24]
	movss	DWORD PTR [rax+24], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+28]
	addss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR [rax+28], xmm0
	mulss	xmm1, DWORD PTR [rcx+rax+32]
	addss	xmm1, DWORD PTR [rax+32]
	movss	DWORD PTR [rax+32], xmm1
	add	rax, 40					; 00000028H
	sub	r9, 1
	jne	$LL10@no_vec_mul

; 46   : 		for (int k = 0; k < width_A; k++)

	inc	rdx
	add	r8, 4
	cmp	rdx, 5600				; 000015e0H
	jl	$LL7@no_vec_mul

; 43   : 	for (int i = 0; i < height_A; i++)

	add	rbx, 8
	sub	rsi, 1
	jne	$LL4@no_vec_mul

; 55   : 	cout << setw(5) << "Time of non vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	lea	edx, QWORD PTR [rsi+5]
	lea	rcx, QWORD PTR $T1[rsp]
	call	QWORD PTR __imp_?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z
	mov	rdi, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip

; 424  :     (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

	mov	rdx, QWORD PTR [rdi]
	movsxd	rcx, DWORD PTR [rdx+4]
	mov	rdx, QWORD PTR [rax+8]
	add	rcx, rdi
	call	QWORD PTR [rax]
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp

; 55   : 	cout << setw(5) << "Time of non vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	call	QWORD PTR __imp_GetTickCount
	lea	rdx, OFFSET FLAT:??_C@_0CI@MADAGADH@Time?5of?5non?5vectorized?5multipli@
	mov	rcx, rdi
	mov	ebx, eax
	sub	ebx, ebp
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	mov	edx, ebx
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@K@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_02EEKDFEKL@ms@
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 56   : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?no_vec_mul@@YAXHHHPEAPEAM00@Z ENDP			; no_vec_mul
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
;	COMDAT ?AVX_mul@@YAXHHHPEAPEAM00@Z
_TEXT	SEGMENT
$T6 = 32
height_A$dead$ = 64
width_B$dead$ = 72
width_A$dead$ = 80
A$ = 88
B$ = 96
C$ = 104
?AVX_mul@@YAXHHHPEAPEAM00@Z PROC			; AVX_mul, COMDAT

; 60   : {

$LN27:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rbx, r9

; 61   : 	DWORD start_time = GetTickCount();

	call	QWORD PTR __imp_GetTickCount
	mov	rdi, QWORD PTR C$[rsp]
	mov	r11d, 2800				; 00000af0H
	mov	rsi, QWORD PTR B$[rsp]
	mov	r14d, eax
	sub	rdi, rbx
$LL4@AVX_mul:

; 63   : 	{
; 64   : 		float* c = C[i];

	mov	r10, QWORD PTR [rdi+rbx]
	xor	edx, edx
	mov	r9, rsi
	npad	3
$LL7@AVX_mul:

; 66   : 		{
; 67   : 			const float* b = B[k];
; 68   : 			const float a = A[i][k];

	mov	rax, QWORD PTR [rbx]
	mov	ecx, 350				; 0000015eH
	mov	r8, QWORD PTR [r9]
	sub	r8, r10
	vbroadcastss ymm2, DWORD PTR [rdx+rax]
	mov	rax, r10
	npad	9
$LL10@AVX_mul:

; 69   : 			for (int j = 0; j < width_B; j += 8) {
; 70   : 				_mm256_storeu_ps(c + j, _mm256_add_ps(_mm256_loadu_ps(c + j), _mm256_mul_ps(_mm256_set1_ps(a), _mm256_loadu_ps(b + j))));

	vmulps	ymm1, ymm2, YMMWORD PTR [r8+rax]
	vaddps	ymm1, ymm1, YMMWORD PTR [rax]
	vmovups	YMMWORD PTR [rax], ymm1
	lea	rax, QWORD PTR [rax+32]
	sub	rcx, 1
	jne	SHORT $LL10@AVX_mul

; 65   : 		for (int k = 0; k < width_A; k++)

	add	r9, 8
	add	rdx, 4
	cmp	rdx, 22400				; 00005780H
	jl	SHORT $LL7@AVX_mul

; 62   : 	for (int i = 0; i < height_A; i++)

	add	rbx, 8
	sub	r11, 1
	vzeroupper
	jne	SHORT $LL4@AVX_mul

; 74   : 	cout << setw(5) << "Time of manually vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	lea	edx, QWORD PTR [rcx+5]
	lea	rcx, QWORD PTR $T6[rsp]
	call	QWORD PTR __imp_?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z
	mov	rdi, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip

; 424  :     (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

	mov	rdx, QWORD PTR [rdi]
	movsxd	rcx, DWORD PTR [rdx+4]
	mov	rdx, QWORD PTR [rax+8]
	add	rcx, rdi
	call	QWORD PTR [rax]
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp

; 74   : 	cout << setw(5) << "Time of manually vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	call	QWORD PTR __imp_GetTickCount
	lea	rdx, OFFSET FLAT:??_C@_0CN@CGANNBID@Time?5of?5manually?5vectorized?5mul@
	mov	rcx, rdi
	mov	ebx, eax
	sub	ebx, r14d
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	mov	edx, ebx
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@K@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_02EEKDFEKL@ms@
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 75   : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	mov	rdi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?AVX_mul@@YAXHHHPEAPEAM00@Z ENDP			; AVX_mul
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
;	COMDAT ?changeColors@@YAXH@Z
_TEXT	SEGMENT
color$ = 48
?changeColors@@YAXH@Z PROC				; changeColors, COMDAT

; 78   : {

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx

; 79   : 	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle

; 80   : 	SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | color));

	mov	rcx, rax
	movzx	edx, bx

; 81   : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 80   : 	SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | color));

	rex_jmp	QWORD PTR __imp_SetConsoleTextAttribute
?changeColors@@YAXH@Z ENDP				; changeColors
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
;	COMDAT ?check@@YA_NPEAPEAM0@Z
_TEXT	SEGMENT
matrix_C$ = 8
matrix_C_AVX$ = 16
?check@@YA_NPEAPEAM0@Z PROC				; check, COMDAT

; 87   : 	for (int i = 0; i < SIZE * 4; i++)
; 88   : 		for (int j = 0; j < SIZE * 4; j++)
; 89   : 		{
; 90   : 			if (matrix_C[i][j] == matrix_C_AVX[i][j])

	mov	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rdx]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN8@check
	jne	SHORT $LN8@check

; 91   : 				return TRUE;

	mov	al, 1

; 94   : 		}
; 95   : }

	ret	0
$LN8@check:

; 92   : 			else
; 93   : 				return FALSE;

	xor	al, al

; 94   : 		}
; 95   : }

	ret	0
?check@@YA_NPEAPEAM0@Z ENDP				; check
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp
;	COMDAT main
_TEXT	SEGMENT
$T15 = 48
$T9 = 48
$T25 = 128
$T26 = 136
$T27 = 144
main	PROC						; COMDAT

; 98   : {

$LN171:
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H

; 99   : 	float** matrix_A, ** matrix_B, ** matrix_C, ** matrix_C_AVX;
; 100  : 
; 101  : 
; 102  : 	matrix_A = new float* [SIZE * 4];

	mov	ecx, 22400				; 00005780H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	r12d, 2800				; 00000af0H
	mov	QWORD PTR $T25[rsp], rax
	mov	edi, r12d
	mov	rsi, rax
	mov	rbx, rax
$LL4@main:

; 103  : 	for (int i = 0; i < SIZE * 4; i++) {
; 104  : 		matrix_A[i] = new float[SIZE * 8];

	mov	ecx, 22400				; 00005780H
	call	??_U@YAPEAX_K@Z				; operator new[]

; 105  : 		ZeroMemory(matrix_A[i], SIZE * 8 * sizeof(float));

	xor	edx, edx
	mov	QWORD PTR [rbx], rax
	mov	r8d, 22400				; 00005780H
	mov	rcx, rax
	call	memset
	lea	rbx, QWORD PTR [rbx+8]
	sub	rdi, 1
	jne	SHORT $LL4@main

; 106  : 	}
; 107  : 
; 108  : 
; 109  : 	matrix_B = new float* [SIZE * 8];

	mov	ecx, 44800				; 0000af00H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	r13, rax
	mov	rbx, rax
	mov	edi, 5600				; 000015e0H
	npad	3
$LL7@main:

; 110  : 	for (int i = 0; i < SIZE * 8; i++) {
; 111  : 		matrix_B[i] = new float[SIZE * 4];

	mov	ecx, 11200				; 00002bc0H
	call	??_U@YAPEAX_K@Z				; operator new[]

; 112  : 		ZeroMemory(matrix_B[i], SIZE * 4 * sizeof(float));

	xor	edx, edx
	mov	QWORD PTR [rbx], rax
	mov	r8d, 11200				; 00002bc0H
	mov	rcx, rax
	call	memset
	lea	rbx, QWORD PTR [rbx+8]
	sub	rdi, 1
	jne	SHORT $LL7@main

; 113  : 	}
; 114  : 
; 115  : 	matrix_C = new float* [SIZE * 4];

	mov	ecx, 22400				; 00005780H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T27[rsp], rax
	mov	rbx, rax
	mov	rdi, r12
	npad	1
$LL10@main:

; 116  : 	for (int i = 0; i < SIZE * 4; i++) {
; 117  : 		matrix_C[i] = new float[SIZE * 4];

	mov	ecx, 11200				; 00002bc0H
	call	??_U@YAPEAX_K@Z				; operator new[]

; 118  : 		ZeroMemory(matrix_C[i], SIZE * 4 * sizeof(float));

	xor	edx, edx
	mov	QWORD PTR [rbx], rax
	mov	r8d, 11200				; 00002bc0H
	mov	rcx, rax
	call	memset
	lea	rbx, QWORD PTR [rbx+8]
	sub	rdi, 1
	jne	SHORT $LL10@main

; 119  : 	}
; 120  : 
; 121  : 	matrix_C_AVX = new float* [SIZE * 4];

	mov	ecx, 22400				; 00005780H
	call	??_U@YAPEAX_K@Z				; operator new[]
	mov	QWORD PTR $T26[rsp], rax
	mov	rbx, rax
	mov	rdi, r12
	npad	1
$LL13@main:

; 122  : 	for (int i = 0; i < SIZE * 4; i++) {
; 123  : 		matrix_C_AVX[i] = new float[SIZE * 4];

	mov	ecx, 11200				; 00002bc0H
	call	??_U@YAPEAX_K@Z				; operator new[]

; 124  : 		ZeroMemory(matrix_C_AVX[i], SIZE * 4 * sizeof(float));

	xor	edx, edx
	mov	QWORD PTR [rbx], rax
	mov	r8d, 11200				; 00002bc0H
	mov	rcx, rax
	call	memset
	lea	rbx, QWORD PTR [rbx+8]
	sub	rdi, 1
	jne	SHORT $LL13@main

; 16   : 	srand(clock() + key);

	call	QWORD PTR __imp_clock
	lea	ecx, DWORD PTR [rax+15]
	call	QWORD PTR __imp_srand
	xor	r14d, r14d
	mov	r15d, r14d
	npad	4
$LL37@main:

; 18   : 		for (int j = 0; j < width; j++)

	mov	ebx, r14d
	mov	rdi, r14
$LL40@main:

; 19   : 			matrix[i][j] = 1 + rand() % 15;

	call	QWORD PTR __imp_rand
	inc	ebx
	lea	rdi, QWORD PTR [rdi+4]
	mov	r8d, eax
	mov	eax, -2004318071			; ffffffff88888889H
	imul	r8d
	mov	rax, QWORD PTR [rsi]
	add	edx, r8d
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31
	add	edx, ecx
	imul	ecx, edx, 15
	sub	r8d, ecx
	inc	r8d
	movd	xmm0, r8d
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rdi+rax-4], xmm0
	cmp	ebx, 5600				; 000015e0H
	jb	SHORT $LL40@main

; 17   : 	for (int i = 0; i < height; i++)

	inc	r15d
	add	rsi, 8
	cmp	r15d, r12d
	jb	SHORT $LL37@main

; 16   : 	srand(clock() + key);

	call	QWORD PTR __imp_clock
	lea	ecx, DWORD PTR [rax+48]
	call	QWORD PTR __imp_srand
	mov	r15d, r14d
	mov	rsi, r13
	npad	3
$LL45@main:

; 18   : 		for (int j = 0; j < width; j++)

	mov	ebx, r14d
	mov	rdi, r14
$LL48@main:

; 19   : 			matrix[i][j] = 1 + rand() % 15;

	call	QWORD PTR __imp_rand
	inc	ebx
	lea	rdi, QWORD PTR [rdi+4]
	mov	r8d, eax
	mov	eax, -2004318071			; ffffffff88888889H
	imul	r8d
	mov	rax, QWORD PTR [rsi]
	add	edx, r8d
	sar	edx, 3
	mov	ecx, edx
	shr	ecx, 31
	add	edx, ecx
	imul	ecx, edx, 15
	sub	r8d, ecx
	inc	r8d
	movd	xmm0, r8d
	cvtdq2ps xmm0, xmm0
	movss	DWORD PTR [rdi+rax-4], xmm0
	cmp	ebx, r12d
	jb	SHORT $LL48@main

; 17   : 	for (int i = 0; i < height; i++)

	inc	r15d
	add	rsi, 8
	cmp	r15d, 5600				; 000015e0H
	jb	SHORT $LL45@main

; 42   : 	DWORD start_time = GetTickCount();

	call	QWORD PTR __imp_GetTickCount
	mov	r11, QWORD PTR $T25[rsp]
	mov	rdi, r12
	mov	rsi, QWORD PTR $T27[rsp]
	mov	r15d, eax
	sub	rsi, r11
	npad	8
$LL53@main:

; 44   : 	{
; 45   : 		float* c = C[i];

	mov	r10, QWORD PTR [rsi+r11]
	mov	rdx, r14
	mov	r8, QWORD PTR [r11]
	npad	6
$LL56@main:

; 47   : 		{
; 48   : 			const float* b = B[k];

	mov	rcx, QWORD PTR [r13+rdx*8]
	lea	rax, QWORD PTR [r10+4]

; 49   : 			float a = A[i][k];

	movss	xmm2, DWORD PTR [r8]
	sub	rcx, r10
	mov	r9d, 280				; 00000118H
	npad	9
$LL59@main:

; 50   : #pragma loop(no_vector)
; 51   : 			for (int j = 0; j < width_B; j++)
; 52   : 				c[j] += a * b[j];

	movaps	xmm0, xmm2
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax-4]
	addss	xmm0, DWORD PTR [rax-4]
	movss	DWORD PTR [rax-4], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax]
	addss	xmm1, DWORD PTR [rax]
	movss	DWORD PTR [rax], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+4]
	addss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rax+4], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax+8]
	addss	xmm1, DWORD PTR [rax+8]
	movss	DWORD PTR [rax+8], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+12]
	addss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR [rax+12], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax+16]
	addss	xmm1, DWORD PTR [rax+16]
	movss	DWORD PTR [rax+16], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+20]
	addss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR [rax+20], xmm0
	movaps	xmm0, xmm2
	mulss	xmm1, DWORD PTR [rcx+rax+24]
	addss	xmm1, DWORD PTR [rax+24]
	movss	DWORD PTR [rax+24], xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, DWORD PTR [rcx+rax+28]
	addss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR [rax+28], xmm0
	mulss	xmm1, DWORD PTR [rcx+rax+32]
	addss	xmm1, DWORD PTR [rax+32]
	movss	DWORD PTR [rax+32], xmm1
	add	rax, 40					; 00000028H
	sub	r9, 1
	jne	$LL59@main

; 46   : 		for (int k = 0; k < width_A; k++)

	inc	rdx
	add	r8, 4
	cmp	rdx, 5600				; 000015e0H
	jl	$LL56@main

; 43   : 	for (int i = 0; i < height_A; i++)

	add	r11, 8
	sub	rdi, 1
	jne	$LL53@main

; 55   : 	cout << setw(5) << "Time of non vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	lea	edx, QWORD PTR [rdi+5]
	lea	rcx, QWORD PTR $T9[rsp]
	call	QWORD PTR __imp_?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z
	mov	rdi, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip

; 424  :     (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

	mov	rdx, QWORD PTR [rdi]
	movsxd	rcx, DWORD PTR [rdx+4]
	mov	rdx, QWORD PTR [rax+8]
	add	rcx, rdi
	call	QWORD PTR [rax]
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp

; 55   : 	cout << setw(5) << "Time of non vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	call	QWORD PTR __imp_GetTickCount
	lea	rdx, OFFSET FLAT:??_C@_0CI@MADAGADH@Time?5of?5non?5vectorized?5multipli@
	mov	rcx, rdi
	mov	ebx, eax
	sub	ebx, r15d
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	mov	edx, ebx
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@K@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_02EEKDFEKL@ms@
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
	mov	r15, QWORD PTR $T27[rsp]
	mov	rbx, r14
	npad	1
$LL16@main:

; 125  : 	}
; 126  : 
; 127  : 	fill(SIZE * 4, SIZE * 8, matrix_A, 15);
; 128  : 
; 129  : 	fill(SIZE * 8, SIZE * 4, matrix_B, 48);
; 130  : 
; 131  : 	no_vec_mul(SIZE * 4, SIZE * 4, SIZE * 8, matrix_A, matrix_B, matrix_C);
; 132  : 	for (int i = 0; i < SIZE * 4; i++)
; 133  : 		ZeroMemory(matrix_C[i], SIZE * 4 * sizeof(float));

	mov	rcx, QWORD PTR [r15+rbx*8]
	xor	edx, edx
	mov	r8d, 11200				; 00002bc0H
	call	memset
	inc	rbx
	cmp	rbx, r12
	jl	SHORT $LL16@main

; 134  : 
; 135  : 	auto_vec_mul(SIZE * 4, SIZE * 4, SIZE * 8, matrix_A, matrix_B, matrix_C);

	mov	rbx, QWORD PTR $T25[rsp]
	mov	r9, rbx
	mov	QWORD PTR [rsp+40], r15
	mov	QWORD PTR [rsp+32], r13
	call	?auto_vec_mul@@YAXHHHPEAPEAM00@Z	; auto_vec_mul

; 61   : 	DWORD start_time = GetTickCount();

	call	QWORD PTR __imp_GetTickCount

; 134  : 
; 135  : 	auto_vec_mul(SIZE * 4, SIZE * 4, SIZE * 8, matrix_A, matrix_B, matrix_C);

	mov	rdi, QWORD PTR $T26[rsp]
	mov	r11, rbx
	sub	rdi, rbx

; 61   : 	DWORD start_time = GetTickCount();

	mov	esi, eax

; 134  : 
; 135  : 	auto_vec_mul(SIZE * 4, SIZE * 4, SIZE * 8, matrix_A, matrix_B, matrix_C);

	mov	rbx, r12
	npad	4
$LL66@main:

; 64   : 		float* c = C[i];

	mov	r10, QWORD PTR [rdi+r11]
	mov	r8, r14
	mov	r9, r13
	npad	6
$LL69@main:

; 68   : 			const float a = A[i][k];

	mov	rax, QWORD PTR [r11]
	mov	ecx, 350				; 0000015eH
	mov	rdx, QWORD PTR [r9]
	sub	rdx, r10
	vbroadcastss ymm2, DWORD PTR [r8+rax]

; 66   : 		{
; 67   : 			const float* b = B[k];

	mov	rax, r10
	npad	9
$LL72@main:

; 69   : 			for (int j = 0; j < width_B; j += 8) {
; 70   : 				_mm256_storeu_ps(c + j, _mm256_add_ps(_mm256_loadu_ps(c + j), _mm256_mul_ps(_mm256_set1_ps(a), _mm256_loadu_ps(b + j))));

	vmulps	ymm1, ymm2, YMMWORD PTR [rdx+rax]
	vaddps	ymm1, ymm1, YMMWORD PTR [rax]
	vmovups	YMMWORD PTR [rax], ymm1
	lea	rax, QWORD PTR [rax+32]
	sub	rcx, 1
	jne	SHORT $LL72@main

; 65   : 		for (int k = 0; k < width_A; k++)

	add	r9, 8
	add	r8, 4
	cmp	r8, 22400				; 00005780H
	jl	SHORT $LL69@main

; 62   : 	for (int i = 0; i < height_A; i++)

	add	r11, 8
	sub	rbx, 1
	vzeroupper
	jne	SHORT $LL66@main

; 74   : 	cout << setw(5) << "Time of manually vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	lea	edx, QWORD PTR [rcx+5]
	lea	rcx, QWORD PTR $T15[rsp]
	call	QWORD PTR __imp_?setw@std@@YA?AU?$_Smanip@_J@1@_J@Z
	mov	rdi, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip

; 424  :     (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

	mov	rdx, QWORD PTR [rdi]
	movsxd	rcx, DWORD PTR [rdx+4]
	mov	rdx, QWORD PTR [rax+8]
	add	rcx, rdi
	call	QWORD PTR [rax]
; File D:\Visual Studio\6\AVP_lab_1\AVP_lab_1\Source.cpp

; 74   : 	cout << setw(5) << "Time of manually vectorized multiplication: " << GetTickCount() - start_time << "ms" << endl;

	call	QWORD PTR __imp_GetTickCount
	lea	rdx, OFFSET FLAT:??_C@_0CN@CGANNBID@Time?5of?5manually?5vectorized?5mul@
	mov	rcx, rdi
	mov	ebx, eax
	sub	ebx, esi
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	mov	edx, ebx
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@K@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_02EEKDFEKL@ms@
	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z

; 90   : 			if (matrix_C[i][j] == matrix_C_AVX[i][j])

	mov	rsi, QWORD PTR $T26[rsp]
	mov	rax, QWORD PTR [r15]
	mov	rcx, QWORD PTR [rsi]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN23@main
	jne	SHORT $LN23@main

; 79   : 	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle

; 80   : 	SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | color));

	mov	rcx, rax
	mov	edx, 2
	call	QWORD PTR __imp_SetConsoleTextAttribute

; 136  : 
; 137  : 	AVX_mul(SIZE * 4, SIZE * 4, SIZE * 8, matrix_A, matrix_B, matrix_C_AVX);
; 138  : 
; 139  : 	if (check(matrix_C, matrix_C_AVX) == 1) {
; 140  : 	changeColors(GREEN);
; 141  : 	cout << endl << "ALL RIGHT" << endl;

	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_09FGBMFCFC@ALL?5RIGHT@

; 142  : 	changeColors(WHITE);
; 143  : 	}

	jmp	SHORT $LN169@main
$LN23@main:

; 79   : 	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle

; 80   : 	SetConsoleTextAttribute(hConsole, (WORD)((0 << 4) | color));

	mov	rcx, rax
	mov	edx, 12
	call	QWORD PTR __imp_SetConsoleTextAttribute

; 144  : 	else {
; 145  : 		changeColors(RED);
; 146  : 		cout << "WAS MISTAKE" << endl;

	mov	rcx, QWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
	lea	rdx, OFFSET FLAT:??_C@_0M@PNDGOBCJ@WAS?5MISTAKE@
$LN169@main:

; 147  : 		changeColors(WHITE);
; 148  : 	}
; 149  : 
; 150  : 	for (int i = 0; i < SIZE * 4; i++) {

	call	??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ; std::operator<<<std::char_traits<char> >
	lea	rdx, OFFSET FLAT:??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ; std::endl<char,std::char_traits<char> >
	mov	rcx, rax
	call	QWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	rcx, rax
	mov	edx, 7
	call	QWORD PTR __imp_SetConsoleTextAttribute
	mov	rdi, QWORD PTR $T25[rsp]
	mov	rbx, r15
	sub	rdi, r15
	sub	rsi, r15
$LL19@main:

; 151  : 		delete[] matrix_A[i];

	mov	rcx, QWORD PTR [rbx+rdi]
	call	??_V@YAXPEAX@Z				; operator delete[]

; 152  : 		delete[] matrix_C[i];

	mov	rcx, QWORD PTR [rbx]
	call	??_V@YAXPEAX@Z				; operator delete[]

; 153  : 		delete[] matrix_C_AVX[i];

	mov	rcx, QWORD PTR [rbx+rsi]
	call	??_V@YAXPEAX@Z				; operator delete[]
	lea	rbx, QWORD PTR [rbx+8]
	sub	r12, 1
	jne	SHORT $LL19@main

; 154  : 	}
; 155  : 	delete[] matrix_A;

	mov	rcx, QWORD PTR $T25[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]

; 156  : 	delete[] matrix_C;

	mov	rcx, r15
	call	??_V@YAXPEAX@Z				; operator delete[]

; 157  : 	delete[] matrix_C_AVX;

	mov	rcx, QWORD PTR $T26[rsp]
	call	??_V@YAXPEAX@Z				; operator delete[]
	npad	5
$LL22@main:

; 158  : 
; 159  : 	for (int i = 0; i < SIZE * 8; i++)
; 160  : 		delete[] matrix_B[i];

	mov	rcx, QWORD PTR [r13+r14*8]
	call	??_V@YAXPEAX@Z				; operator delete[]
	inc	r14
	cmp	r14, 5600				; 000015e0H
	jl	SHORT $LL22@main

; 161  : 	delete[] matrix_B;

	mov	rcx, r13
	call	??_V@YAXPEAX@Z				; operator delete[]

; 162  : 
; 163  : 	return 0;

	xor	eax, eax

; 164  : }

	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ
_TEXT	SEGMENT
this$ = 8
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT

; 125  :             return _Ok;

	movzx	eax, BYTE PTR [rcx+8]

; 126  :         }

	ret	0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEBA_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT

; 109  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 110  : #if !_HAS_EXCEPTIONS
; 111  :             const bool _Zero_uncaught_exceptions = true;
; 112  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

	call	QWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

	test	al, al
	jne	SHORT $LN2@sentry

; 119  :                 this->_Myostr._Osfx();

	mov	rcx, QWORD PTR [rbx]
	call	QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	npad	1
$LN2@sentry:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	rdx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rdx]
	movsxd	rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios

; 80   :         return _Mystrbuf;

	mov	rcx, QWORD PTR [rcx+rdx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 80   :             if (_Rdbuf) {

	test	rcx, rcx
	je	SHORT $LN10@sentry

; 81   :                 _Rdbuf->_Unlock();

	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	npad	1
$LN10@sentry:

; 120  :             }
; 121  :         }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Ostr$ = 56
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

$LN24:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx
	mov	rdi, rcx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

	mov	QWORD PTR [rcx], rdx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	rdx, QWORD PTR [rdx]
	movsxd	rax, DWORD PTR [rdx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios

; 80   :         return _Mystrbuf;

	mov	rcx, QWORD PTR [rax+rbx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 73   :             if (_Rdbuf) {

	test	rcx, rcx
	je	SHORT $LN8@sentry

; 74   :                 _Rdbuf->_Lock();

	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]
	mov	rdx, QWORD PTR [rbx]
$LN8@sentry:

; 93   :             if (!_Ostr.good()) {

	movsxd	rcx, DWORD PTR [rdx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

	cmp	DWORD PTR [rcx+rbx+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 93   :             if (!_Ostr.good()) {

	je	SHORT $LN2@sentry

; 94   :                 _Ok = false;

	xor	al, al

; 95   :                 return;

	jmp	SHORT $LN1@sentry
$LN2@sentry:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios

; 70   :         return _Tiestr;

	mov	rcx, QWORD PTR [rcx+rbx+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 99   :             if (!_Tied || _Tied == &_Ostr) {

	test	rcx, rcx
	je	SHORT $LN4@sentry
	cmp	rcx, rbx
	je	SHORT $LN4@sentry

; 101  :                 return;
; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

	call	QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

	mov	rax, QWORD PTR [rbx]
	movsxd	rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

	cmp	DWORD PTR [rcx+rbx+16], 0
	sete	al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

	jmp	SHORT $LN1@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

	mov	al, 1
$LN1@sentry:

; 106  :         }

	mov	BYTE PTR [rdi+8], al
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Ostr$ = 56
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
this$ = 48
_Ostr$ = 56
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA PROC ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
	mov	rcx, QWORD PTR this$[rdx]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA ENDP ; `std::basic_ostream<char,std::char_traits<char> >::sentry::sentry'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 456  :         return static_cast<int_type>(EOF);

	mov	eax, -1

; 457  :     }

	ret	0
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z
_TEXT	SEGMENT
_Left$ = 8
_Right$ = 16
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 448  :         return _Left == _Right;

	mov	eax, DWORD PTR [rdx]
	cmp	DWORD PTR [rcx], eax
	sete	al

; 449  :     }

	ret	0
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NAEBH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z
_TEXT	SEGMENT
_First$ = 8
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 374  :         // find length of null-terminated string
; 375  : #if _HAS_CXX17
; 376  : #ifdef __cpp_char8_t
; 377  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 378  : #if _HAS_U8_INTRINSICS
; 379  :             return __builtin_u8strlen(_First);
; 380  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 381  :             return _Primary_char_traits::length(_First);
; 382  : #endif // _HAS_U8_INTRINSICS
; 383  :         } else
; 384  : #endif // __cpp_char8_t
; 385  :         {
; 386  :             return __builtin_strlen(_First);
; 387  :         }
; 388  : #else // _HAS_CXX17
; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	rax, -1
$LL3@length:
	inc	rax
	cmp	BYTE PTR [rcx+rax], 0
	jne	SHORT $LL3@length

; 390  : #endif // _HAS_CXX17
; 391  :     }

	ret	0
?length@?$_Narrow_char_traits@DH@std@@SA_KQEBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 48
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

$LN8:
	sub	rsp, 40					; 00000028H

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	rdx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rdx]
	movsxd	rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios

; 80   :         return _Mystrbuf;

	mov	rcx, QWORD PTR [rcx+rdx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 80   :             if (_Rdbuf) {

	test	rcx, rcx
	je	SHORT $LN2@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	npad	1
$LN2@Sentry_bas:

; 82   :             }
; 83   :         }

	add	rsp, 40					; 00000028H
	ret	0
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
_TEXT	SEGMENT
this$ = 48
_Ostr$ = 56
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

$LN8:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	QWORD PTR [rcx], rdx
	mov	rbx, rcx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	rax, QWORD PTR [rdx]
	movsxd	r8, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios

; 80   :         return _Mystrbuf;

	mov	rcx, QWORD PTR [r8+rdx+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 73   :             if (_Rdbuf) {

	test	rcx, rcx
	je	SHORT $LN6@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+8]
$LN6@Sentry_bas:

; 75   :             }
; 76   :         }

	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\iomanip
;	COMDAT ??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z
_TEXT	SEGMENT
_Ostr$ = 48
_Manip$ = 56
??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z PROC ; std::operator<<<char,std::char_traits<char>,__int64>, COMDAT

; 423  :     const _Smanip<_Arg>& _Manip) { // insert by calling function with output stream and argument

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 424  :     (*_Manip._Pfun)(_Ostr, _Manip._Manarg);

	mov	rax, QWORD PTR [rcx]
	mov	rbx, rcx
	mov	r8, rdx
	mov	rdx, QWORD PTR [rdx+8]
	movsxd	rcx, DWORD PTR [rax+4]
	add	rcx, rbx
	call	QWORD PTR [r8]

; 425  :     return _Ostr;

	mov	rax, rbx

; 426  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$?6DU?$char_traits@D@std@@_J@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBU?$_Smanip@_J@0@@Z ENDP ; std::operator<<<char,std::char_traits<char>,__int64>
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
_TEXT	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 734  :     const char* _Val) { // insert NTBS into char stream

$LN99:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	r15, rdx
	mov	rsi, rcx

; 735  :     using _Elem = char;
; 736  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 737  : 
; 738  :     ios_base::iostate _State = ios_base::goodbit;

	xor	ebx, ebx
	mov	DWORD PTR _State$[rsp], ebx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xstring

; 389  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

	mov	r14, -1
	npad	7
$LL92@operator:
	inc	r14
	cmp	BYTE PTR [rdx+r14], bl
	jne	SHORT $LL92@operator
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

	mov	rcx, QWORD PTR [rcx]
	movsxd	rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase

; 363  :         return _Wide;

	mov	rdi, QWORD PTR [rax+rsi+40]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 740  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

	test	rdi, rdi
	jle	SHORT $LN17@operator
	cmp	rdi, r14
	jle	SHORT $LN17@operator
	sub	rdi, r14
	jmp	SHORT $LN18@operator
$LN17@operator:
	xor	edi, edi
$LN18@operator:

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

	mov	r12, rsi
	mov	QWORD PTR _Ok$[rsp], rsi
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios

; 80   :         return _Mystrbuf;

	mov	r8, QWORD PTR [rax+rsi+72]
	mov	rdx, rcx
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 73   :             if (_Rdbuf) {

	test	r8, r8
	je	SHORT $LN39@operator

; 74   :                 _Rdbuf->_Lock();

	mov	rax, QWORD PTR [r8]
	mov	rcx, r8
	call	QWORD PTR [rax+8]
	mov	rcx, QWORD PTR [rsi]
	mov	rdx, rcx
$LN39@operator:

; 93   :             if (!_Ostr.good()) {

	movsxd	rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

	cmp	DWORD PTR [rax+rsi+16], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 93   :             if (!_Ostr.good()) {

	je	SHORT $LN33@operator

; 94   :                 _Ok = false;

	xor	al, al

; 95   :                 return;

	jmp	SHORT $LN95@operator
$LN33@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios

; 70   :         return _Tiestr;

	mov	rax, QWORD PTR [rax+rsi+80]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 99   :             if (!_Tied || _Tied == &_Ostr) {

	test	rax, rax
	je	SHORT $LN35@operator
	cmp	rax, rsi
	je	SHORT $LN35@operator

; 101  :                 return;
; 102  :             }
; 103  : 
; 104  :             _Tied->flush();

	mov	rcx, rax
	call	QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

	mov	rcx, QWORD PTR [rsi]
	movsxd	rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase

; 295  :         return rdstate() == ios_base::goodbit;

	cmp	DWORD PTR [rax+rsi+16], 0
	sete	al
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 105  :             _Ok = _Ostr.good(); // store test only after flushing tie

	mov	rdx, rcx
	jmp	SHORT $LN95@operator
$LN35@operator:

; 100  :                 _Ok = true;

	mov	al, 1
$LN95@operator:

; 106  :         }

	mov	BYTE PTR _Ok$[rsp+8], al

; 741  :     const typename _Myos::sentry _Ok(_Ostr);
; 742  : 
; 743  :     if (!_Ok) {

	test	al, al
	jne	SHORT $LN8@operator

; 744  :         _State |= ios_base::badbit;

	mov	ebx, 4

; 745  :     } else { // state okay, insert

	jmp	$LN22@operator
$LN8@operator:

; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

	movsxd	rax, DWORD PTR [rcx+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase

; 326  :         return _Fmtfl;

	mov	ecx, DWORD PTR [rax+rsi+24]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 747  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

	and	ecx, 448				; 000001c0H
	cmp	ecx, 64					; 00000040H
	je	SHORT $LN87@operator
	npad	4
$LL4@operator:

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

	test	rdi, rdi
	jle	SHORT $LN89@operator

; 749  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

	mov	rax, QWORD PTR [rsi]
	movsxd	rcx, DWORD PTR [rax+4]
	movzx	edx, BYTE PTR [rcx+rsi+88]
	mov	rcx, QWORD PTR [rcx+rsi+72]
	call	QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
	cmp	eax, -1
	je	SHORT $LN96@operator

; 748  :             for (; 0 < _Pad; --_Pad) { // pad on left

	dec	rdi
	jmp	SHORT $LL4@operator
$LN89@operator:

; 750  :                     _State |= ios_base::badbit; // insertion failed, quit
; 751  :                     break;
; 752  :                 }
; 753  :             }
; 754  :         }
; 755  : 
; 756  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

	mov	rdx, QWORD PTR [rsi]
$LN87@operator:
	movsxd	rax, DWORD PTR [rdx+4]
	mov	r8, r14
	mov	rdx, r15
	mov	rcx, QWORD PTR [rax+rsi+72]
	call	QWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z
	cmp	rax, r14
	jne	SHORT $LN96@operator
$LL93@operator:

; 757  :             _State |= ios_base::badbit;
; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {
; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

	test	rdi, rdi
	jle	SHORT $LN6@operator

; 762  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

	mov	rax, QWORD PTR [rsi]
	movsxd	rcx, DWORD PTR [rax+4]
	movzx	edx, BYTE PTR [rcx+rsi+88]
	mov	rcx, QWORD PTR [rcx+rsi+72]
	call	QWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z
	cmp	eax, -1
	je	SHORT $LN96@operator

; 757  :             _State |= ios_base::badbit;
; 758  :         }
; 759  : 
; 760  :         if (_State == ios_base::goodbit) {
; 761  :             for (; 0 < _Pad; --_Pad) { // pad on right

	dec	rdi
	jmp	SHORT $LL93@operator
$LN96@operator:

; 763  :                     _State |= ios_base::badbit; // insertion failed, quit
; 764  :                     break;
; 765  :                 }
; 766  :             }
; 767  :         }
; 768  : 
; 769  :         _Ostr.width(0);

	mov	ebx, 4
	mov	DWORD PTR _State$[rsp], ebx
$LN6@operator:
	mov	rax, QWORD PTR [rsi]
	movsxd	rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\xiosbase

; 368  :         _Wide                      = _Newwidth;

	mov	QWORD PTR [rcx+rsi+40], 0
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
	jmp	SHORT $LN22@operator
$LN23@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios
	mov	rsi, QWORD PTR _Ostr$[rsp]
	mov	ebx, DWORD PTR _State$[rsp]
	mov	r12, QWORD PTR _Ok$[rsp]
$LN22@operator:
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 773  :     _Ostr.setstate(_State);

	mov	rax, QWORD PTR [rsi]
	movsxd	rcx, DWORD PTR [rax+4]
	add	rcx, rsi
	xor	r8d, r8d
	mov	edx, ebx
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1

; 113  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

	call	QWORD PTR __imp_?uncaught_exception@std@@YA_NXZ

; 114  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 115  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 116  : #endif // !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 117  : 
; 118  :             if (_Zero_uncaught_exceptions) {

	test	al, al
	jne	SHORT $LN72@operator

; 119  :                 this->_Myostr._Osfx();

	mov	rcx, r12
	call	QWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ
	npad	1
$LN72@operator:

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

	mov	rax, QWORD PTR [r12]
	movsxd	rcx, DWORD PTR [rax+4]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ios

; 80   :         return _Mystrbuf;

	mov	rcx, QWORD PTR [rcx+r12+72]
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream

; 80   :             if (_Rdbuf) {

	test	rcx, rcx
	je	SHORT $LN76@operator

; 81   :                 _Rdbuf->_Unlock();

	mov	rax, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
	npad	1
$LN76@operator:

; 774  :     return _Ostr;

	mov	rax, rsi

; 775  : }

	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z ENDP ; std::operator<<<std::char_traits<char> >
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
	lea	rcx, QWORD PTR _Ok$[rdx]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
	lea	rcx, QWORD PTR _Ok$[rdx]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4

; 770  :         _CATCH_IO_(ios_base, _Ostr)

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
	mov	rdx, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rdx]
	movsxd	rcx, DWORD PTR [rax+4]
	add	rcx, rdx
	mov	r8b, 1
	mov	edx, 4
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1
	mov	rax, 0
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
	int	3
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
	lea	rcx, QWORD PTR _Ok$[rdx]
	jmp	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
?dtor$1@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
	lea	rcx, QWORD PTR _Ok$[rdx]
	jmp	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Ogtpy
;	COMDAT text$x
text$x	SEGMENT
_Ok$ = 32
_Ostr$ = 96
_Val$ = 104
_State$ = 112
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA PROC ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4

; 770  :         _CATCH_IO_(ios_base, _Ostr)

	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
	mov	rdx, QWORD PTR _Ostr$[rbp]
	mov	rax, QWORD PTR [rdx]
	movsxd	rcx, DWORD PTR [rax+4]
	add	rcx, rdx
	mov	r8b, 1
	mov	edx, 4
	call	QWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z
	npad	1
	mov	rax, 0
	add	rsp, 32					; 00000020H
	pop	rbp
	ret	0
	int	3
?catch$4@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA ENDP ; `std::operator<<<std::char_traits<char> >'::`1'::catch$4
text$x	ENDS
; Function compile flags: /Ogtpy
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.28.29333\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z
_TEXT	SEGMENT
_Ostr$ = 48
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 978  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H

; 979  :     _Ostr.put(_Ostr.widen('\n'));

	mov	rax, QWORD PTR [rcx]
	mov	rbx, rcx
	mov	dl, 10
	movsxd	rcx, DWORD PTR [rax+4]
	add	rcx, rbx
	call	QWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z
	movzx	edx, al
	mov	rcx, rbx
	call	QWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z

; 980  :     _Ostr.flush();

	mov	rcx, rbx
	call	QWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ

; 981  :     return _Ostr;

	mov	rax, rbx

; 982  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
END
